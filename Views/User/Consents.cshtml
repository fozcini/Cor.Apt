<div class="card">
    <div class="card-header card-header-primary card-header-text py-2">
        <div class="card-text">
            <h4 class="card-title">Onam İşlemleri</h4>
        </div>
    </div>
    <div class="card-body">
        <h6 class="text-primary" style="font-size: 1.2rem !important;">Onam Kayıtları</h6>
        <div class="control-section">
            <ejs-grid id="GridConsents" height="400px" width="%100" actionComplete="actionComplete" actionBegin="actionBegin" allowGrouping="true" allowSorting="true" toolbar='@(new List<string>() {"Search", "Add", "Delete"})' allowResizing="true" allowTextWrap="true" locale="tr">
                <e-data-manager adaptor="UrlAdaptor" url="/Consent/Get" insertUrl="/Consent/Insert" removeUrl="/Consent/Remove"></e-data-manager>
                <e-grid-editSettings allowAdding="true" allowDeleting="true" showDeleteConfirmDialog="true" mode="Dialog"></e-grid-editSettings>
                <e-grid-columns>
                    <e-grid-column field="ConsentId" headerText="Id" isPrimaryKey="true" visible="false"></e-grid-column>
                    <e-grid-column field="IsApproved" headerText="Onay Durumu" displayAsCheckBox="true" textAlign="Center" type="boolean" editType="booleanedit" width="100"></e-grid-column>
                    <e-grid-column field="ApprovedDate" headerText="Onay Tarihi" format='yMd' editType="datepickeredit" width="120" DefaultValue="@(DateTime.Now)"></e-grid-column>
                    <e-grid-column field="IdentificationNumber" headerText="Kimlik No" width="120"></e-grid-column>
                    <e-grid-column field="FullName" headerText="İsim Soyisim" width="120"></e-grid-column>
                    <e-grid-column field="ConsentFormId" headerText="Onam Formu" foreignKeyValue="ConsentFormName" foreignKeyField="ConsentFormId" dataSource="ViewBag.ConsentForms" width="120"></e-grid-column>
                    <e-grid-column field="Phone" headerText="Telefon" width="120"></e-grid-column>
                    <e-grid-column field="RecordDate" headerText="Kayıt Tarihi" format='yMd' editType="datepickeredit" width="120" DefaultValue="@(DateTime.Now)" width="120"></e-grid-column>
                    <e-grid-column field="Log" headerText="Kayıt Bilgileri" width="120"></e-grid-column>
                </e-grid-columns>
            </ejs-grid>
        </div>
        <h6 class="text-primary mt-3" style="font-size: 1.2rem !important;">Onam Formları</h6>
        <div class="control-section">
            <ejs-grid id="GridConsentForms" height="400px" width="%100" toolbar='@(new List<string>() {"Search", "Add", "Edit"})' allowResizing="true" locale="tr">
                <e-data-manager adaptor="UrlAdaptor" url="/ConsentForm/Get" insertUrl="/ConsentForm/Insert" updateUrl="/ConsentForm/Update"></e-data-manager>
                <e-grid-editSettings allowAdding="true" allowEditing="true" mode="Dialog"></e-grid-editSettings>
                <e-grid-columns>
                    <e-grid-column field="ConsentFormId" headerText="Id" isPrimaryKey="true" visible="false"></e-grid-column>
                    <e-grid-column field="RecordDate" headerText="Tarih" format='yMd' editType="datepickeredit" width="100" DefaultValue="@(DateTime.Now)"></e-grid-column>
                    <e-grid-column field="ConsentFormName" headerText="Onam Formu Adı"></e-grid-column>
                    <e-grid-column field="Details" headerText="Onam Formu" width="300" edit='@(new {create = "create", read = "read", destroy = "destroy", write = "write"})'></e-grid-column>
                </e-grid-columns>
            </ejs-grid>
        </div>
    </div>
</div>

<script type="text/javascript">
    ej.base.L10n.load({
        'tr': {
            'datepicker': {
                'today': 'Bugün'
            },
            'grid': {
                'EmptyRecord': 'Kayıt yok.',
                'Add': 'Ekle',
                'Edit': 'Düzenle',
                'Update': 'Güncelle',
                'Delete': 'Sil',
                'GroupDropArea': 'Gruplamak için sütunların başlıklarını sürükleyiniz.',
                'Search': 'Arama',
                'EditOperationAlert': 'Düzenlemek için kayıt seçilmedi.',
                'Save': 'Kaydet',
                'EditFormTitle': 'Kayıt Düzenleme - ',
                'ConfirmDelete': 'Kaydı silmek istediğinize emin misiniz?',
                'AddFormTitle': 'Yeni Kayıt',
                'OKButton': 'Tamam',
                'SaveButton': 'Kaydet',
                'CancelButton': 'İptal',
                'Item': 'kayıt',
                'Items': 'kayıt',
            },
            'pager': {
                'currentPageInfo': '{0}/{1}',
                'totalItemsInfo': '({0} kayıt)',
                'firstPageTooltip': 'İlk Sayfa',
                'lastPageTooltip': 'Son Sayfa',
                'nextPageTooltip': 'Sonraki Sayfa',
                'previousPageTooltip': 'Önceki Sayfa',
                'nextPagerTooltip': 'Sonraki Sayfa',
                'previousPagerTooltip': 'Önceki Sayfa',
                'pagerDropDown' : 'Sayfa başı kayıt',
                'All': 'Tümü'
            }
        }
    });
    loadCultureFiles('tr');
    function loadCultureFiles(name) {
        var files = ['ca-gregorian.json', 'numbers.json', 'timeZoneNames.json', 'dateFields.json'];
        var loader = ej.base.loadCldr;
        var loadCulture = function (prop) {
            var val, ajax;
            ajax = new ej.base.Ajax(location.origin + '/cldr-data/main/' + name + '/' + files[prop], 'GET', false);
            ajax.onSuccess = function (value) { val = value; };
            ajax.send();
            loader(JSON.parse(val));
            ej.base.setCulture('tr');
        };
        for (var prop = 0; prop < files.length; prop++) { loadCulture(prop); }
    }
    function actionBegin(args) {
        if ((args.requestType === 'beginEdit' || args.requestType === 'add')) {
            var grid = document.getElementById('GridConsents').ej2_instances[0];
            for (const cols of grid.columns) {
                if ((cols).field === 'Log') {
                    (cols).visible = false;
                }
                if ((cols).field === 'ApprovedDate') {
                    (cols).visible = false;
                }
                if ((cols).field === 'IsApproved') {
                    (cols).visible = false;
                }
            }
        }
    }
    function actionComplete(args) {
        if (args.requestType === 'save') {
            var grid = document.getElementById('GridConsents').ej2_instances[0];
            for (const cols of grid.columns) {
                if ((cols).field === 'Log') {
                    (cols).visible = true;
                }
                if ((cols).field === 'ApprovedDate') {
                    (cols).visible = true;
                }
                if ((cols).field === 'IsApproved') {
                    (cols).visible = true;
                }
            }
            grid.refresh();
        }
    }
    function create(args) {
        rteElem = document.createElement('input');
        return rteElem;
    }
    function write(args) {
        richTextEditor = new ej.inputs.TextBox({
            placeholder: 'Açıklama',
            floatLabelType: 'Auto',
            multiline : true, // enable multiline feature support 
            value: args.rowData[args.column.field],   // bind the column value to the textbox 
            created: function () {
                this.addAttributes({rows: "20"});
            }
          });
        richTextEditor.appendTo(rteElem);
    }
    function destroy() { richTextEditor.destroy(); }
    function read(args) { return richTextEditor.value; }
</script>
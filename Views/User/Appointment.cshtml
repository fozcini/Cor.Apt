@using Syncfusion.EJ2
@{
    var dataManager = new DataManager()
    {
        Url = "/Appointment/Load",
        Adaptor = "UrlAdaptor",
        CrudUrl = "/Appointment/Update",
        CrossDomain = true
    };
    var template = "<div class='template-wrap'><div class='subject'>${PatientName} - ${getAppointmentType(data)}</div><div class='time'>${getTimeString(data.StartTime)} - ${getTimeString(data.EndTime)}</div></div>";
    var button = new
    {
        content = "Ara",
        isPrimary = true
    };
}
<script>
    var unitListForCheck = JSON.parse('@Json.Serialize(ViewBag.Units)');
</script>
<style>
    .e-quick-popup-wrapper.e-device {
        height: auto !important;
        top: 30vh !important;
        bottom: auto !important;
    }
    .e-popup {
        height: auto !important;
    }
    .custom-event-editor .e-textlabel {
        padding-right: 15px;
        text-align: right;
    }
    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }
    .e-schedule .e-vertical-view .e-content-wrap .e-appointment .e-appointment-details {
        padding: 0;
        height: 100%;
    }
    .e-schedule .template-wrap {
        height: 100%;
        white-space: normal;
    }
    .e-schedule .template-wrap .subject {
        text-align: center;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }
    .e-schedule .template-wrap .time {
        text-align: center;
        overflow: hidden;
        margin: -3px;
    }
    .quick-info-header {
        background-color: white;
        padding: 8px 18px;
    }
    .quick-info-header-content {
        justify-content: flex-end;
        display: flex;
        flex-direction: column;
        padding: 5px 10px 5px;
    }
    .quick-info-title {
        font-weight: 500;
        font-size: 16px;
        letter-spacing: 0.48px;
        height: 22px;
    }
    .duration-text {
        font-size: 11px;
        letter-spacing: 0.33px;
        height: 14px;
    }
    .content-area {
        padding: 10px;
        width: auto;
    }
    .event-content {
        height: 90px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0 15px;
    }
    .meeting-type-wrap,
    .meeting-subject-wrap,
    .notes-wrap {
        font-size: 11px;
        color: #666;
        letter-spacing: 0.33px;
        height: 24px;
        padding: 5px;
    }
    .event-content div label {
        display: inline-block;
        min-width: 45px;
        color: #666;
    }
    .event-content div span {
        font-size: 11px;
        color: #151515;
        letter-spacing: 0.33px;
        line-height: 14px;
        padding-left: 8px;
    }
    .cell-footer.e-btn {
        background-color: #ffffff;
        border-color: #878787;
        color: #878787;
    }
    .cell-footer {
        padding-top: 10px;
    }
    .e-quick-popup-wrapper .e-cell-popup .e-popup-content {
        padding: 0 14px !important;
    }
    .e-quick-popup-wrapper .e-event-popup .e-popup-footer {
        display: block;
    }
    .e-quick-popup-wrapper .e-popup-footer button:first-child {
        margin-right: 5px;
    }
    .material-dark .quick-info-header {
        background-color: #424242;
    }
    .highcontrast .quick-info-header,
    .tailwind-dark .quick-info-header,
    .bootstrap-dark .quick-info-header,
    .bootstrap5-dark .quick-info-header,
    .fluent-dark .quick-info-header,
    .fabric-dark .quick-info-header {
        background-color: transparent;
    }
    .tailwind-dark .quick-info-header-content,
    .bootstrap-dark .quick-info-header-content,
    .fabric-dark .quick-info-header-content,
    .material-dark .quick-info-header-content,
    .highcontrast .quick-info-header-content {
        color: #fff !important;
    }
    .tailwind-dark .event-content div label,
    .tailwind-dark .event-content div span,
    .bootstrap-dark .event-content div label,
    .bootstrap-dark .event-content div span,
    .bootstrap5-dark .event-content div label,
    .bootstrap5-dark .event-content div span,
    .fluent-dark .event-content div label,
    .fluent-dark .event-content div span,
    .fabric-dark .event-content div label,
    .fabric-dark .event-content div span,
    .material-dark .event-content div label,
    .material-dark .event-content div span,
    .highcontrast .event-content div label,
    .highcontrast .event-content div span {
        color: #fff;
    }
    .material .e-quick-popup-wrapper .e-popup-footer {
        display: block !important;
        padding: 0px 18px 8px 22px !important;
    }
    .custom-event-editor .e-textlabel {
        padding-right: 15px;
        text-align: right;
    }
    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }
</style>

<div class="card">
    <div class="card-header card-header-primary card-header-text" style="padding: 1rem 1rem 0rem 1rem;">
        <div class="card-text">
            <h4 class="card-title">Randevu Takvimi</h4>
        </div>
    </div>
    <div class="card-body" style="padding: 0rem 1rem 1rem 1rem;">
        <div class="row d-lg-none">
            <h6>Randevu Ekle</h6>
            <ejs-textbox class="mt-2" id="ManPatientName" placeholder="Hasta İsmi"></ejs-textbox>
            <ejs-textbox class="mt-2" id="ManPhone" placeholder="Telefon"></ejs-textbox>
            <ejs-dropdownlist class="mt-2" id="ManUnits" dataSource="@ViewBag.Units" placeholder="Takvim Seçin">
                <e-dropdownlist-fields text="UnitName" value="UnitId"></e-dropdownlist-fields>
            </ejs-dropdownlist>
            <ejs-dropdownlist class="mt-2" id="ManAppointmentTypes" dataSource="@ViewBag.AppointmentTypes" placeholder="Randevu Türü">
                <e-dropdownlist-fields text="AppointmentTypeName" value="AppointmentTypeId"></e-dropdownlist-fields>
            </ejs-dropdownlist>
            <ejs-datetimepicker class="mt-2" id="ManStartTime" placeholder="Başlangıç" value="DateTime.Now" step="10"></ejs-datetimepicker>
            <ejs-datetimepicker class="mt-2" id="ManEndTime" placeholder="Bitiş" value="DateTime.Now"></ejs-datetimepicker>
            <ejs-textbox class="mt-2" id="ManDescription" placeholder="Notlar"></ejs-textbox>
            <div class="row">
                <ejs-button class="mt-3" id="Man" content="Kaydet"></ejs-button>
                <ejs-button class="mt-3" id="ManUpdate" content="Takvimi Güncelle"></ejs-button>
            </div>
        </div>
        <div class="row mb-3">
            <h6>Göstermek / Gizlemek İçin Oda Seçin</h6>
            <div class="col-6 d-flex justify-content-between flex-wrap">
                @foreach (var unit in ViewBag.Units)
                {
                    <ejs-checkbox id="@unit.UnitId" change="onChange" checked="true" label="@unit.UnitName" value="@unit.UnitId"></ejs-checkbox>
                }
            </div>
            <div class="col-6 d-flex justify-content-between flex-wrap">
                <a href="javascript:;" class="mb-3 text-primary">
                    <i class="fas fa-search text-primary text-sm" data-bs-toggle="modal" data-bs-placement="top" title="Randevu Ara" data-bs-target="#search"> Randevu Ara</i>
                </a>
            </div>
        </div>
        <div class="control-section" style="height: 60vh">
            <ejs-schedule id="schedule" startHour="09:00" endHour="18:00" height="100%" firstDayOfWeek="1" popupOpen="onPopupOpen" eventRendered="onEventRendered" actionBegin="onActionBegin" locale='tr'>
                <e-schedule-quickinfotemplates header="#header-template" content="#content-template" footer="#footer-template"></e-schedule-quickinfotemplates>
                <e-schedule-views>
                    <e-schedule-view option="TimelineDay"></e-schedule-view>
                    <e-schedule-view option="TimelineWeek"></e-schedule-view>
                    <e-schedule-view option="Day"></e-schedule-view>
                    <e-schedule-view option="Week"></e-schedule-view>
                    <e-schedule-view option="WorkWeek"></e-schedule-view>
                    <e-schedule-view option="Month"></e-schedule-view>
                    <e-schedule-view option="Agenda"></e-schedule-view>
                </e-schedule-views>
                <e-schedule-group enableCompactView="false" resources="@ViewBag.Resources"></e-schedule-group>
                <e-schedule-resources>
                    <e-schedule-resource dataSource="@ViewBag.Units" field="UnitId" title="Oda" name="Units" textField="UnitName" idField="UnitId"></e-schedule-resource>
                    <e-schedule-resource dataSource="@ViewBag.AppointmentTypes" field="AppointmentTypeId" title="Randevu Türü" name="AppointmentTypes" textField="AppointmentTypeName" idField="AppointmentTypeId" colorField="Color"></e-schedule-resource>
                </e-schedule-resources>
                <e-schedule-timescale interval="60" slotCount="4"></e-schedule-timescale>
                <e-schedule-eventsettings dataSource="dataManager" template="@template"></e-schedule-eventsettings>
            </ejs-schedule>
        </div>
    </div>
</div>
<!-- Search Modal -->
<div class="modal fade" id="search" tabindex="-1" role="dialog" aria-labelledby="searchLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="searchLabel">Randevu Ara</h5>
                <button type="button" class="btn-close text-dark" data-bs-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <div class="modal-body" style="padding: 1rem;">
                    <ejs-textbox id="searchInput" placeholder="İsim Soyisim" floatLabelType="Auto"></ejs-textbox>
                    <ejs-button id="normalbtn" content="Ara" onclick="search()" class="mt-3 mb-2"></ejs-button>
                    <table class="mt-3" style="width: 100%; color: black;">
                        <thead>
                            <tr>
                              <th class="text-uppercase text-xs font-weight-bolder">İsim Soyisim</th>
                              <th class="text-uppercase text-xs font-weight-bolder">Oda</th>
                              <th class="text-uppercase text-xs font-weight-bolder">Tarih</th>
                              <th class="text-uppercase text-xs font-weight-bolder">Saat</th>
                            </tr>
                        </thead>
                        <tbody id="tableBody" style="font-size: 1rem;">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function search(){
        let str = document.getElementById("searchInput").value;
        fetch("/Appointment/Search?str="+str, {
            method: "POST",
            headers: { "Content-type": "application/json; charset=UTF-8" }
        })
        .then(response => { return response.json(); })
        .then(data => {
            var table = document.getElementById("tableBody")
            table.innerHTML = "";
            data.forEach(e => {
                var table = document.getElementById("tableBody")
                var start = new Date(e.StartTime)
                var end = new Date(e.EndTime)
                var row = '<tr><td>'+ e.PatientName +'</td>' +
                          '<td>'+ e.Unit.UnitName +'</td>' +
                          '<td>'+ start.toLocaleDateString("tr-TR") + '</td>' +
                          '<td>'+ start.toLocaleTimeString("tr-TR", {hour: '2-digit', minute:'2-digit'}) + ' - ' + end.toLocaleTimeString("tr-TR", {hour: '2-digit', minute:'2-digit'}) +'</td></tr>';
                table.innerHTML += row
            })
        });
    }
    $('#search').on('hidden.bs.modal', function () {
        document.getElementById("searchInput").value = ""
        document.getElementById("tableBody").innerHTML = ""
    })
</script>
<script id="header-template" type="text/x-template">
    <div class="quick-info-header">
        <div class="quick-info-header-content" style='${getHeaderStyles(data)}'>
            <div class="quick-info-title">${if (elementType == "cell")}Randevu Oluştur${else}Randevu Detayları${/if}</div>
            <div class="duration-text">${getHeaderDetails(data)}</div>
        </div>
    </div>
</script>
<script id="content-template" type="text/x-template">
    <div class="quick-info-content">
        ${if (elementType == "cell")}
        <div class="e-cell-content">
            <div class="content-area">
                <input id="patient" placeholder="Hasta Adı"/>
            </div>
            <div class="content-area">
                <input id="phone" placeholder="Telefon"/>
            </div>
            <div class="content-area">
                <input id="unit" placeholder="Oda Seçimi" />
            </div>
            <div class="content-area">
                <input id="type" placeholder="Randevu Türü" />
            </div>
            <div class="content-area">
                <input id="start" placeholder="Başlangıç" />
            </div>
            <div class="content-area">
                <input id="end" placeholder="Bitiş" />
            </div>
            <div class="content-area">
                <input id="notes" placeholder="Notlar" />
            </div>
        </div>
        ${else}
        <div class="event-content">
            <div class="meeting-type-wrap">
                <label>Hasta Adı</label>:
                <span>${PatientName}</span>
            </div>
            <div class="meeting-type-wrap">
                <label>Telefon</label>:
                <span>${Phone}</span>
            </div>
            <div class="meeting-type-wrap">
                <label>Oda Seçimi</label>:
                <span>${getUnitName(data)}</span>
            </div>
            <div class="meeting-type-wrap">
                <label>Randevu Türü</label>:
                <span>${getAppointmentType(data)}</span>
            </div>
            <div class="notes-wrap">
                <label>Not</label>:
                <span>${Description}</span>
            </div>
        </div>
        ${/if}
    </div>
</script>
<script id="footer-template" type="text/x-template">
    <div class="quick-info-footer">
        ${if (elementType == "cell")}
        <div class="cell-footer">
            <button id="add">Ekle</button>
        </div>
        ${else}
        <div class="event-footer">
            <button id="delete">Sil</button>
        </div>
        ${/if}
    </div>
</script>

<script type="text/javascript">
    document.getElementById('Man').onclick = function() {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var addObj = {}
        addObj.Id = scheduleObj.getEventMaxID();
        addObj.PatientName = document.getElementById('ManPatientName').value;
        addObj.Phone = document.getElementById('ManPhone').value;
        addObj.StartTime = document.getElementById('ManStartTime').ej2_instances[0].value;
        addObj.EndTime = document.getElementById('ManEndTime').ej2_instances[0].value;
        addObj.Description = document.getElementById('ManDescription').value;
        addObj.AppointmentTypeId = document.getElementById('ManAppointmentTypes_hidden').value;
        addObj.UnitId = document.getElementById('ManUnits_hidden').value;
        scheduleObj.addEvent(addObj);
        scheduleObj.refreshEvents();
        document.getElementById('ManPatientName').value = ''
        document.getElementById('ManDescription').value = ''
    }
    document.getElementById('ManUpdate').onclick = function() {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        scheduleObj.refreshEvents();
    }
    var editorData = {};
    var intl = new ej.base.Internationalization();
    function onChange(args) {
        var units = unitListForCheck
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var value = parseInt(args.event.currentTarget.querySelector('input').getAttribute('value'), 10);
        var resourceData = units.filter(function (unit) { return unit.UnitId === value; });
        if (args.checked) {
            scheduleObj.addResource(resourceData[0], 'Units', value - 1);
        } else {
            scheduleObj.removeResource(value, 'Units');
        }
    }
    function getTimeString(value) {
        return intl.formatDate(value, { skeleton: 'Hm' });
    }
    window.getHeaderDetails = function (data) {
        return intl.formatDate(data.StartTime, { type: 'date', skeleton: 'full' }) + ' (' + intl.formatDate(data.StartTime, { skeleton: 'Hm' }) + ' - ' + intl.formatDate(data.EndTime, { skeleton: 'Hm' }) + ')';
    };
    window.getHeaderStyles = function (data) {
        return data.elementType === 'cell' ? 'align-items: center; color: #03834f;' : 'background:' + data.AppointmentType.Color + '; color: #ffffff';
    };
    var buttonClickActions = function (e) {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var quickPopup = ej.base.closest(e.target, '.e-quick-popup-wrapper');
        var editor = ej.base.closest(e.target, '.e-schedule-dialog');
        var getSlotData = function () {
            var cellDetails = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());
            if (ej.base.isNullOrUndefined(cellDetails)) { cellDetails = scheduleObj.getCellDetails(scheduleObj.activeCellsData.element); }
            var patient = quickPopup.querySelector('#patient').ej2_instances[0].value;
            var phone = quickPopup.querySelector('#phone').ej2_instances[0].value;
            var notes = quickPopup.querySelector('#notes').ej2_instances[0].value;
            var start = quickPopup.querySelector('#start').ej2_instances[0].value;
            var end = quickPopup.querySelector('#end').ej2_instances[0].value;
            var addObj = {};
            addObj.Id = scheduleObj.getEventMaxID();
            addObj.PatientName = ej.base.isNullOrUndefined(patient) ? '' : patient;
            addObj.Phone = ej.base.isNullOrUndefined(phone) ? '' : phone;
            addObj.StartTime = start;
            addObj.EndTime = end;
            addObj.Description = ej.base.isNullOrUndefined(notes) ? '' : notes;
            addObj.AppointmentTypeId = quickPopup.querySelector('#type').ej2_instances[0].value;
            addObj.UnitId = quickPopup.querySelector('#unit').ej2_instances[0].value;
            return addObj;
        };
        if (e.target.id === 'add') {
            var addObj = getSlotData();
            scheduleObj.addEvent(addObj);
        }
        else if (e.target.id === 'delete') {
            var eventDetails = scheduleObj.activeEventData.event;
            var currentAction = void 0;
            if (eventDetails.RecurrenceRule) {
                currentAction = 'DeleteOccurrence';
            }
            scheduleObj.deleteEvent(eventDetails, currentAction);
        }
        else if (e.target.id === 'save') {
            var updateObj = getSlotData();
            scheduleObj.updateEvent(updateObj);
        }
        else if (e.target.id === 'EditorSave')
        {
            editorData.Id = scheduleObj.getEventMaxID();
            scheduleObj.addEvent(editorData);
        }
        else {
            var isCellPopup = quickPopup.firstElementChild.classList.contains('e-cell-popup');
            var eventDetail = isCellPopup ? getSlotData() : scheduleObj.activeEventData.event;
            var currentActions = isCellPopup ? 'Add' : 'Save';
            scheduleObj.openEditor(eventDetail, currentActions, true);
        }
        scheduleObj.closeQuickInfoPopup();
    };
    window.getAppointmentType = function (data) {
        return data.AppointmentType.AppointmentTypeName;
    };
    window.getUnitName = function (data) {
        return data.Unit.UnitName;
    };
    function applyCategoryColor(args, currentView) {
        var color = args.data.AppointmentType.Color;
        if (!args.element || !color) {
            return;
        }
        if (currentView === 'Agenda') {
            (args.element.firstChild).style.borderLeftColor = color;
        } else {
            args.element.style.backgroundColor = color;
        }
    }
    function onEventRendered(args) {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        applyCategoryColor(args, scheduleObj.currentView);
    }
    function onActionBegin(args) {
        if (args.requestType === 'eventCreate' || args.requestType === 'eventChange') {
            var data;
            if (args.requestType === 'eventCreate') data = args.data[0];
            else if (args.requestType === 'eventChange') data = args.data;
        }
    }
    function onPopupOpen(args) {
        if (args.type === 'Editor')
        {
            args.cancel = true;
        }
        if (args.type === 'QuickInfo' || args.type === 'ViewEventInfo') {
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            var cellDetails = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());
            if(cellDetails !== undefined){
                var startObj = new ej.calendars.DateTimePicker({value: new Date(+cellDetails.startTime), step: 10});
                startObj.appendTo(args.element.querySelector('#start'))
                var endObj = new ej.calendars.DateTimePicker({value: new Date(+cellDetails.endTime), step: 10});
                endObj.appendTo(args.element.querySelector('#end'))
            }
            var patientObj = new ej.inputs.TextBox({ placeholder: 'Hasta Adı' });
            patientObj.appendTo(args.element.querySelector('#patient'));
            var phoneObj = new ej.inputs.TextBox({ placeholder: 'Telefon' });
            phoneObj.appendTo(args.element.querySelector('#phone'));
            var appointmentTypeObj = new ej.dropdowns.DropDownList({
                dataSource: scheduleObj.getResourceCollections()[1].dataSource,
                placeholder: 'Randevu Türü',
                fields: { text: 'AppointmentTypeName', value: 'AppointmentTypeId' },
                index: scheduleObj.getResourceCollections()[1].dataSource.findIndex(o => o.AppointmentTypeId == args.data.AppointmentTypeId)
            });
            var unitObj = new ej.dropdowns.DropDownList({
                dataSource: scheduleObj.getResourceCollections()[0].dataSource,
                placeholder: 'Oda Seçimi',
                fields: { text: 'UnitName', value: 'UnitId' },
                index: scheduleObj.getResourceCollections()[0].dataSource.findIndex(o => o.UnitId == args.data.UnitId)
            });
            appointmentTypeObj.appendTo(args.element.querySelector('#type'));
            unitObj.appendTo(args.element.querySelector('#unit'));
            var notesObj = new ej.inputs.TextBox({ placeholder: 'Notlar' });
            notesObj.appendTo(args.element.querySelector('#notes'));
            var addBtn = args.element.querySelector('#add');
            if (addBtn) {
                new ej.buttons.Button({ content: 'Ekle', cssClass: 'e-flat', isPrimary: true }, addBtn);
                addBtn.onclick = function (e) { buttonClickActions(e); };
            }
            var deleteBtn = args.element.querySelector('#delete');
            if (deleteBtn) {
                new ej.buttons.Button({ content: 'Sil', cssClass: 'e-flat' }, deleteBtn);
                deleteBtn.onclick = function (e) { buttonClickActions(e); };
            }
        }
    }
</script>

@* Turkcelestirme *@
<script type="text/javascript">
    var L10n = ej.base.L10n;
    L10n.load({
        'tr': {
            'schedule': {
                'today': 'Bugün',
                'day': 'Gün',
                'week': 'Hafta',
                'workWeek': 'Hafta İçi',
                'month': 'Ay',
                'agenda': 'Ajanda',
                'year': 'Yıl',
                'timelineDay': 'Günlük Çizelge',
                'timelineWeek': 'Haftalık Çizelge',
                'timelineMonth': 'Aylık Çizelge',
                'newEvent': 'Yeni Etkinlik',
                'more': 'daha',
                'editEvent': 'Düzenle',
                'deleteButton': 'Sil',
                'saveButton': 'Kaydet',
                'cancelButton': 'İptal',
                "deleteEvent": "Kayıt Silme",
                "deleteContent": "Kaydı silmek istediğinize emin misiniz?",
                "delete": "SİL",
                "cancel": "İptal"
            },
        }
    });
    function loadCultureFiles(name) {
        var files = ['currencies.json', 'ca-gregorian.json', 'numbers.json', 'timeZoneNames.json', 'dateFields.json'];
        var loader = ej.base.loadCldr;
        var loadCulture = function (prop) {
            var val, ajax;
            ajax = new ej.base.Ajax(location.origin + '/cldr-data/main/' + name + '/' + files[prop], 'GET', false);
            ajax.onSuccess = function (value) { val = value; };
            ajax.send();
            loader(JSON.parse(val));
            ej.base.setCulture('tr');
        };
        for (var prop = 0; prop < files.length; prop++) { loadCulture(prop); }
    }
    loadCultureFiles('tr');
</script>
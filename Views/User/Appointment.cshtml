@using Syncfusion.EJ2
@{
    var dataManager = new DataManager()
    {
        Url = "/Appointment/Load?type=appointment",
        Adaptor = "UrlAdaptor",
        CrudUrl = "/Appointment/Update?type=appointment",
        CrossDomain = true
    };
    var template = "<div class='template-wrap'><div class='subject'>${getPatientName(data)} - ${Subject}</div><div class='time'>${getTimeString(data.StartTime)} - ${getTimeString(data.EndTime)}</div></div>";
}

<style>
    .custom-event-editor .e-textlabel {
        padding-right: 15px;
        text-align: right;
    }
    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }
    .e-schedule .e-vertical-view .e-content-wrap .e-appointment .e-appointment-details {
        padding: 0;
        height: 100%;
    }
    .e-schedule .template-wrap {
        height: 100%;
        white-space: normal;
    }
    .e-schedule .template-wrap .subject {
        text-align: center;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }
    .e-schedule .template-wrap .time {
        text-align: center;
        overflow: hidden;
        margin: -3px;
    }
    .quick-info-header {
        background-color: white;
        padding: 8px 18px;
    }
    .quick-info-header-content {
        justify-content: flex-end;
        display: flex;
        flex-direction: column;
        padding: 5px 10px 5px;
    }
    .quick-info-title {
        font-weight: 500;
        font-size: 16px;
        letter-spacing: 0.48px;
        height: 22px;
    }
    .duration-text {
        font-size: 11px;
        letter-spacing: 0.33px;
        height: 14px;
    }
    .content-area {
        padding: 10px;
        width: auto;
    }
    .event-content {
        height: 90px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0 15px;
    }
    .meeting-type-wrap,
    .meeting-subject-wrap,
    .notes-wrap {
        font-size: 11px;
        color: #666;
        letter-spacing: 0.33px;
        height: 24px;
        padding: 5px;
    }
    .event-content div label {
        display: inline-block;
        min-width: 45px;
        color: #666;
    }
    .event-content div span {
        font-size: 11px;
        color: #151515;
        letter-spacing: 0.33px;
        line-height: 14px;
        padding-left: 8px;
    }
    .cell-footer.e-btn {
        background-color: #ffffff;
        border-color: #878787;
        color: #878787;
    }
    .cell-footer {
        padding-top: 10px;
    }
    .e-quick-popup-wrapper .e-cell-popup .e-popup-content {
        padding: 0 14px !important;
    }
    .e-quick-popup-wrapper .e-event-popup .e-popup-footer {
        display: block;
    }
    .e-quick-popup-wrapper .e-popup-footer button:first-child {
        margin-right: 5px;
    }
    .material-dark .quick-info-header {
        background-color: #424242;
    }
    .highcontrast .quick-info-header,
    .tailwind-dark .quick-info-header,
    .bootstrap-dark .quick-info-header,
    .bootstrap5-dark .quick-info-header,
    .fluent-dark .quick-info-header,
    .fabric-dark .quick-info-header {
        background-color: transparent;
    }
    .tailwind-dark .quick-info-header-content,
    .bootstrap-dark .quick-info-header-content,
    .fabric-dark .quick-info-header-content,
    .material-dark .quick-info-header-content,
    .highcontrast .quick-info-header-content {
        color: #fff !important;
    }
    .tailwind-dark .event-content div label,
    .tailwind-dark .event-content div span,
    .bootstrap-dark .event-content div label,
    .bootstrap-dark .event-content div span,
    .bootstrap5-dark .event-content div label,
    .bootstrap5-dark .event-content div span,
    .fluent-dark .event-content div label,
    .fluent-dark .event-content div span,
    .fabric-dark .event-content div label,
    .fabric-dark .event-content div span,
    .material-dark .event-content div label,
    .material-dark .event-content div span,
    .highcontrast .event-content div label,
    .highcontrast .event-content div span {
        color: #fff;
    }
    .material .e-quick-popup-wrapper .e-popup-footer {
        display: block !important;
        padding: 0px 18px 8px 22px !important;
    }
    .custom-event-editor .e-textlabel {
        padding-right: 15px;
        text-align: right;
    }
    .custom-event-editor td {
        padding: 7px;
        padding-right: 16px;
    }
</style>

<div class="card">
    <div class="card-header card-header-primary card-header-text">
        <div class="card-text">
            <h4 class="card-title">Randevu Takvimi</h4>
        </div>
    </div>
    <div class="card-body">
        <div class="control-section">
            <ejs-schedule id="schedule" startHour="09:00" endHour="18:00" firstDayOfWeek="1" height="650px" popupOpen="onPopupOpen" eventRendered="onEventRendered" actionBegin="onActionBegin" editorTemplate="#EventEditorTemplate" locale='tr'>
                <e-schedule-quickinfotemplates header="#header-template" content="#content-template" footer="#footer-template"></e-schedule-quickinfotemplates>
                <e-schedule-resources><e-schedule-resource dataSource="@ViewBag.Patients" field="PatientId" title="Hasta" name="Patients" textField="FullName" idField="PatientId"></e-schedule-resource></e-schedule-resources>
                <e-schedule-timescale interval="60" slotCount="4"></e-schedule-timescale>
                <e-schedule-eventsettings dataSource="dataManager" template="@template"></e-schedule-eventsettings>
            </ejs-schedule>
        </div>
    </div>
</div>

<script id="header-template" type="text/x-template">
    <div class="quick-info-header">
        <div class="quick-info-header-content" style='${getHeaderStyles(data)}'>
            <div class="quick-info-title">${if (elementType == "cell")}Randevu Oluştur${else}Randevu Detayları${/if}</div>
            <div class="duration-text">${getHeaderDetails(data)}</div>
        </div>
    </div>
</script>
<script id="content-template" type="text/x-template">
    <div class="quick-info-content">
        ${if (elementType == "cell")}
        <div class="e-cell-content">
            <div class="content-area">
                <input id="subject" placeholder="Açıklama"/>
            </div>
            <div class="content-area">
                <input id="patient" placeholder="Hasta Seçimi" />
            </div>
            <div class="content-area">
                <input id="fee" placeholder="0.0">
            </div>
            <div class="content-area">
                <input id="isPaid">
            </div>
            <div class="content-area">
                <input id="notes" placeholder="Notlar" />
            </div>
        </div>
        ${else}
        <div class="event-content">
            <div class="meeting-type-wrap">
                <label>Açıklama</label>:
                <span>${Subject}</span>
            </div>
            <div class="meeting-type-wrap">
                <label>Hasta</label>:
                <span>${getPatientName(data)}</span>
            </div>
            <div class="notes-wrap">
                <label>Notlar</label>:
                <span>${Description}</span>
            </div>
            <div class="notes-wrap">
                <label>Ücret</label>:
                <span>${Fee}</span>
            </div>
        </div>
        ${/if}
    </div>
</script>
<script id="footer-template" type="text/x-template">
    <div class="quick-info-footer">
        ${if (elementType == "cell")}
        <div class="cell-footer">
            <button id="more-details">Daha fazla</button>
            <button id="add">Ekle</button>
        </div>
        ${else}
        <div class="event-footer">
            <button id="delete">Sil</button>
            <button id="more-details">Daha fazla</button>
        </div>
        ${/if}
    </div>
</script>
<script id="EventEditorTemplate" type="text/x-template">
    <table class="custom-event-editor" width="100%" cellpadding="5">
        <tbody>
            <tr>
                <td class="e-textlabel">Açıklama</td>
                <td colspan="4">
                    <input id="Subject" class="e-field e-input" type="text" value="" name="Subject" style="width: 100%" />
                </td>
            </tr>
            <tr>
                <td class="e-textlabel">Hasta</td>
                <td colspan="4">
                    <input type="text" id="PatientId" name="PatientId" class="e-field" style="width: 100%" />
                </td>
            </tr>
            <tr>
                <td class="e-textlabel">Başlangıç</td>
                <td colspan="4">
                    <input id="StartTime" class="e-field" type="text" name="StartTime" />
                </td>
            </tr>
            <tr>
                <td class="e-textlabel">Bitiş</td>
                <td colspan="4">
                    <input id="EndTime" class="e-field" type="text" name="EndTime" />
                </td>
            </tr>
            <tr>
                <td class="e-textlabel">Ücret</td>
                <td colspan="4">
                    <input type="number" step="0.50" id="Fee" name="Fee" class="e-field" />
                </td>
            </tr>
            <tr>
                <td class="e-textlabel">Ödeme Durumu</td>
                <td colspan="4">
                    <input type="checkbox" id="IsPaid" name="IsPaid" class="e-field" />
                </td>
            </tr>
            <tr>
                <td class="e-textlabel">Not</td>
                <td colspan="4">
                    <textarea id="Description" class="e-field e-input" name="Description" rows="3" cols="50"
                        style="width: 100%; height: 60px !important; resize: vertical"></textarea>
                </td>
            </tr>
        </tbody>
    </table>
</script>

<script type="text/javascript">
    var intl = new ej.base.Internationalization();
    function getTimeString(value) {
        return intl.formatDate(value, { skeleton: 'Hm' });
    }
    window.getHeaderDetails = function (data) {
        return intl.formatDate(data.StartTime, { type: 'date', skeleton: 'full' }) + ' (' + intl.formatDate(data.StartTime, { skeleton: 'Hm' }) + ' - ' + intl.formatDate(data.EndTime, { skeleton: 'Hm' }) + ')';
    };
    window.getHeaderStyles = function (data) {
        if (data.elementType === 'cell') {
            return 'align-items: center; color: #cb0c9f;';
        }
        else {
            if(data.IsPaid) return 'background: #1FAB89; color: #ffffff'
            else return 'background: #FF5AB0; color: #ffffff'            
        }
    };
    var buttonClickActions = function (e) {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        var quickPopup = ej.base.closest(e.target, '.e-quick-popup-wrapper');
        var getSlotData = function () {
            var cellDetails = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());
            if (ej.base.isNullOrUndefined(cellDetails)) { cellDetails = scheduleObj.getCellDetails(scheduleObj.activeCellsData.element); }
            var subject = quickPopup.querySelector('#subject').ej2_instances[0].value;
            var notes = quickPopup.querySelector('#notes').ej2_instances[0].value;
            var fee = quickPopup.querySelector('#fee').ej2_instances[0].value;
            var addObj = {};
            addObj.Id = scheduleObj.getEventMaxID();
            addObj.Subject = ej.base.isNullOrUndefined(subject) ? '' : subject;
            addObj.StartTime = new Date(+cellDetails.startTime);
            addObj.EndTime = new Date(+cellDetails.endTime);
            addObj.Fee = ej.base.isNullOrUndefined(fee) ? '' : fee;
            addObj.IsPaid = quickPopup.querySelector('#isPaid').ej2_instances[0].checked;
            addObj.Description = ej.base.isNullOrUndefined(notes) ? '' : notes;
            addObj.PatientId = quickPopup.querySelector('#patient').ej2_instances[0].value;
            return addObj;
        };
        if (e.target.id === 'add') {
            var addObj = getSlotData();
            scheduleObj.addEvent(addObj);
        }
        else if (e.target.id === 'delete') {
            var eventDetails = scheduleObj.activeEventData.event;
            var currentAction = void 0;
            if (eventDetails.RecurrenceRule) {
                currentAction = 'DeleteOccurrence';
            }
            scheduleObj.deleteEvent(eventDetails, currentAction);
        }
        else {
            var isCellPopup = quickPopup.firstElementChild.classList.contains('e-cell-popup');
            var eventDetail = isCellPopup ? getSlotData() : scheduleObj.activeEventData.event;
            var currentActions = isCellPopup ? 'Add' : 'Save';
            if (eventDetail.RecurrenceRule) {
                currentActions = 'EditOccurrence';
            }
            scheduleObj.openEditor(eventDetail, currentActions, true);
        }
        scheduleObj.closeQuickInfoPopup();
    };
    window.getPatientName = function (data) {
        return data.Patient.FullName;
    };
    function onEventRendered(args) {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        if (!args.element) {
            return;
        }
        if (scheduleObj.currentView === 'Agenda') {
            if(args.data.IsPaid) (args.element.firstChild).style.borderLeftColor = '#1FAB89';
            else (args.element.firstChild).style.borderLeftColor = '#FF5AB0';
        } else {
            if(args.data.IsPaid) args.element.style.backgroundColor = '#1FAB89'
            else args.element.style.backgroundColor = '#FF5AB0';
        }
    }
    function onActionBegin(args) {
        if (args.requestType === 'eventCreate' || args.requestType === 'eventChange') {
            var data;
            if (args.requestType === 'eventCreate') data = args.data[0];
            else if (args.requestType === 'eventChange') data = args.data;
            var scheduleObj = document.getElementById('schedule').ej2_instances[0];
            if (!scheduleObj.isSlotAvailable(data.StartTime, data.EndTime)) args.cancel = true;
        }
    }
    function onPopupOpen(args) {
        var scheduleObj = document.getElementById('schedule').ej2_instances[0];
        if (args.type === 'Editor') {
            var patientObj = new ej.dropdowns.DropDownList({
                dataSource: scheduleObj.getResourceCollections().slice(-1)[0].dataSource,
                placeholder: 'Hasta Seçimi',
                fields: { text: 'FullName', value: 'PatientId' },
                index: 0
            });
            patientObj.appendTo(args.element.querySelector('#PatientId'));
            var startElement = args.element.querySelector('#StartTime');
            if (!startElement.classList.contains('e-datetimepicker')) {
                new ej.calendars.DateTimePicker({ value: new Date(startElement.value) || new Date() }, startElement);
            }
            var endElement = args.element.querySelector('#EndTime');
            if (!endElement.classList.contains('e-datetimepicker')) {
                new ej.calendars.DateTimePicker({ value: new Date(endElement.value) || new Date() }, endElement);
            }
        }
        if (args.type === 'QuickInfo' || args.type === 'ViewEventInfo') {
            var subjectObj = new ej.inputs.TextBox({ placeholder: 'Açıklama' });
            subjectObj.appendTo(args.element.querySelector('#subject'));
            var patientObj = new ej.dropdowns.DropDownList({
                dataSource: scheduleObj.getResourceCollections().slice(-1)[0].dataSource,
                placeholder: 'Hasta Seçimi',
                fields: { text: 'FullName', value: 'PatientId' },
                index: 0
            });
            patientObj.appendTo(args.element.querySelector('#patient'));
            var feeObj = new ej.inputs.NumericTextBox({ locale: 'tr', currency: 'TRY', format: 'c2', value: 0, placeholder: 'Ücret', floatLabelType: 'Auto'});
            feeObj.appendTo(args.element.querySelector('#fee'));
            var isPaidObj = new ej.buttons.CheckBox({label: 'Ödeme Durumu', labelPosition: 'Before'});
            isPaidObj.appendTo(args.element.querySelector("#isPaid"));
            var notesObj = new ej.inputs.TextBox({ placeholder: 'Notlar' });
            notesObj.appendTo(args.element.querySelector('#notes'));
            var moreDetailsBtn = args.element.querySelector('#more-details');
            if (moreDetailsBtn) {
                var moreObj = new ej.buttons.Button({
                    content: 'Daha fazla', cssClass: 'e-flat',
                    isPrimary: args.element.firstElementChild.classList.contains('e-event-popup')
                });
                moreObj.appendTo(moreDetailsBtn);
                moreDetailsBtn.onclick = function (e) { buttonClickActions(e); };
            }
            var addBtn = args.element.querySelector('#add');
            if (addBtn) {
                new ej.buttons.Button({ content: 'Ekle', cssClass: 'e-flat', isPrimary: true }, addBtn);
                addBtn.onclick = function (e) { buttonClickActions(e); };
            }
            var deleteBtn = args.element.querySelector('#delete');
            if (deleteBtn) {
                new ej.buttons.Button({ content: 'Sil', cssClass: 'e-flat' }, deleteBtn);
                deleteBtn.onclick = function (e) { buttonClickActions(e); };
            }
        }
    }
</script>

@* Turkcelestirme *@
<script type="text/javascript">
    var L10n = ej.base.L10n;
    L10n.load({
        'tr': {
            'schedule': {
                'today': 'Bugün',
                'day': 'Gün',
                'week': 'Hafta',
                'workWeek': 'Hafta İçi',
                'month': 'Ay',
                'agenda': 'Ajanda',
                'year': 'Yıl',
                'timelineWeek': 'Haftalık Çizelge',
                'timelineMonth': 'Aylık Çizelge',
                'newEvent': 'Yeni Etkinlik',
                'more': 'daha',
                'editEvent': 'Düzenle',
                'deleteButton': 'Sil',
                'saveButton': 'Kaydet',
                'cancelButton': 'İptal',
                "deleteEvent": "Kayıt Silme",
                "deleteContent": "Kaydı silmek istediğinize emin misiniz?",
                "delete": "SİL",
                "cancel": "İptal"
            },
        }
    });
    function loadCultureFiles(name) {
        var files = ['currencies.json', 'ca-gregorian.json', 'numbers.json', 'timeZoneNames.json', 'dateFields.json'];
        var loader = ej.base.loadCldr;
        var loadCulture = function (prop) {
            var val, ajax;
            ajax = new ej.base.Ajax(location.origin + '/cldr-data/main/' + name + '/' + files[prop], 'GET', false);
            ajax.onSuccess = function (value) { val = value; };
            ajax.send();
            loader(JSON.parse(val));
            ej.base.setCulture('tr');
        };
        for (var prop = 0; prop < files.length; prop++) { loadCulture(prop); }
    }
    loadCultureFiles('tr');
</script>